    #include <curand_kernel.h>
    #define MAXTRY 10000

    extern "C"{

    __device__ void gammagen(float *x, float ain){

    unsigned long seed;
    unsigned long id;
    curandState s;
    unsigned long cnt=0;
    seed=10;
    id = blockIdx.x;
    curand_init(seed, id, 0, &s);
    float d, c, y, v, u, a;

    if(ain > 1.0){
    a = ain;
    }else if(ain > 0.0){
    a = ain + 1.0;
    }else{
    return;
    }

    d = a - 1. / 3.;
    c = 1. / sqrt(9. * d);
    for (;;) {
    do {
    y =curand_normal(&s);
    v = 1. + c * y;
    } while (v <= 0.);

    cnt=cnt+1;
    if(cnt > MAXTRY){
    printf("EXCEED MAXTRY");
    return;
    }

    v = v * v * v;
    u = curand_uniform(&s);
    if (u < 1. - 0.0331 * (y * y) * (y * y)) {

    if(a > ain){
    x[id] = (d * v)*pow(curand_uniform(&s),1.0/ain);
    return;
    }else{
    x[id] = (d * v);
    return;
    }

    }
    if (log(u) < 0.5 * y * y + d * (1. - v + log(v))) {

    if(a > ain){
    x[id] = (d * v)*pow(curand_uniform(&s),1.0/ain);
    return;
    }else{
    x[id] = (d * v);
    return;
    }

    }

    }

    }
    }
